// DOM Content Loaded
document.addEventListener('DOMContentLoaded', function() {
    // Get PHP data passed to JavaScript
    const mtnData = window.mtnData || {};
    
    // Initialize all components
    initializeNavigation();
    initializeScrollAnimations();
    initializeCounters();
    initializeCTAButtons(mtnData);
    initializeDeadlineCountdown(mtnData);
    initializeSmoothScrolling();
    initializeLoadingAnimations();
    
    // Initialize PHP-specific features
    initializeStatsAnimation(mtnData);
    initializePageTracking(mtnData);
});

// Navigation functionality
function initializeNavigation() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-link');

    // Toggle mobile menu
    hamburger.addEventListener('click', function() {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');
    });

    // Close mobile menu when clicking on links
    navLinks.forEach(link => {
        link.addEventListener('click', function() {
            hamburger.classList.remove('active');
            navMenu.classList.remove('active');
        });
    });

    // Navbar scroll effect
    window.addEventListener('scroll', function() {
        const navbar = document.querySelector('.navbar');
        if (window.scrollY > 100) {
            navbar.style.background = 'rgba(255, 255, 255, 0.98)';
            navbar.style.boxShadow = '0 2px 20px rgba(0, 0, 0, 0.1)';
        } else {
            navbar.style.background = 'rgba(255, 255, 255, 0.95)';
            navbar.style.boxShadow = 'none';
        }
    });

    // Active navigation link highlighting
    const sections = document.querySelectorAll('section[id]');
    
    window.addEventListener('scroll', function() {
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('active');
            }
        });
    });
}

// Scroll animations using Intersection Observer
function initializeScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
                
                // Add stagger animation for grid items
                if (entry.target.classList.contains('highlights-grid') || 
                    entry.target.classList.contains('locations-grid')) {
                    const items = entry.target.children;
                    Array.from(items).forEach((item, index) => {
                        setTimeout(() => {
                            item.style.opacity = '1';
                            item.style.transform = 'translateY(0)';
                        }, index * 100);
                    });
                }
            }
        });
    }, observerOptions);

    // Observe elements for animation
    const animatedElements = document.querySelectorAll(`
        .section-header,
        .highlight-card,
        .requirement-group,
        .location-card,
        .benefit-item,
        .highlights-grid,
        .locations-grid
    `);

    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
        observer.observe(el);
    });
}

// Animated counters for statistics
function initializeCounters() {
    const stats = document.querySelectorAll('.stat-number');
    let hasAnimated = false;

    const observerOptions = {
        threshold: 0.5
    };

    const statsObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !hasAnimated) {
                hasAnimated = true;
                animateCounters();
            }
        });
    }, observerOptions);

    const statsSection = document.querySelector('.hero-stats');
    if (statsSection) {
        statsObserver.observe(statsSection);
    }

    function animateCounters() {
        stats.forEach(stat => {
            const target = stat.textContent === '∞' ? '∞' : parseInt(stat.textContent);
            if (target === '∞') return;

            let current = 0;
            const increment = target / 50;
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    stat.textContent = target;
                    clearInterval(timer);
                } else {
                    stat.textContent = Math.floor(current);
                }
            }, 30);
        });
    }
}

// CTA Button functionality
function initializeCTAButtons(mtnData = {}) {
    const applyButtons = document.querySelectorAll('#applyBtn, #finalApplyBtn, #requirementsApplyBtn');
    const learnMoreBtn = document.getElementById('learnMoreBtn');

    applyButtons.forEach(btn => {
        // Skip if button is disabled (applications closed)
        if (btn.disabled) return;
        
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Create ripple effect
            createRippleEffect(e, this);
            
            // Check if applications are still open
            if (mtnData.isDeadlinePassed) {
                setTimeout(() => {
                    alert('Sorry, the application deadline has passed. Please check back for future opportunities.');
                }, 300);
                return;
            }
            
            // Show application modal or redirect
            setTimeout(() => {
                showApplicationModal(mtnData);
            }, 300);
        });
    });

    if (learnMoreBtn) {
        learnMoreBtn.addEventListener('click', function(e) {
            e.preventDefault();
            createRippleEffect(e, this);
            
            setTimeout(() => {
                document.querySelector('#program').scrollIntoView({
                    behavior: 'smooth'
                });
            }, 200);
        });
    }
}

// Create ripple effect for buttons
function createRippleEffect(event, button) {
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');
    
    // Add CSS for ripple effect
    if (!document.querySelector('.ripple-styles')) {
        const style = document.createElement('style');
        style.className = 'ripple-styles';
        style.textContent = `
            .btn { position: relative; overflow: hidden; }
            .ripple {
                position: absolute;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.3);
                transform: scale(0);
                animation: ripple-animation 0.6s linear;
                pointer-events: none;
            }
            @keyframes ripple-animation {
                to { transform: scale(4); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }
    
    button.appendChild(ripple);
    
    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// Deadline countdown
function initializeDeadlineCountdown(mtnData = {}) {
    const deadlineElements = document.querySelectorAll('.deadline-notice, .deadline-reminder');
    
    // Use PHP data if available, otherwise fall back to hardcoded date
    const targetDate = new Date('2025-09-05T23:59:59');
    let isDeadlinePassed = mtnData.isDeadlinePassed || false;

    function updateCountdown() {
        const now = new Date();
        const timeLeft = targetDate - now;
        
        if (timeLeft > 0 && !isDeadlinePassed) {
            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            
            deadlineElements.forEach(element => {
                const strongElement = element.querySelector('strong');
                if (strongElement && days >= 0) {
                    if (days > 0) {
                        strongElement.textContent = `${days} days, ${hours} hours remaining`;
                    } else {
                        strongElement.textContent = `${hours} hours remaining`;
                    }
                    
                    // Add urgency styling if less than 3 days
                    if (days < 3) {
                        element.style.background = 'rgba(255, 69, 0, 0.1)';
                        element.style.borderColor = '#ff4500';
                        element.style.animation = 'pulse 2s infinite';
                    }
                }
            });
        } else {
            deadlineElements.forEach(element => {
                element.innerHTML = '<i class="fas fa-exclamation-triangle"></i><span>Application period has ended</span>';
                element.classList.add('deadline-passed');
            });
            
            // Disable apply buttons
            const applyButtons = document.querySelectorAll('#applyBtn, #finalApplyBtn');
            applyButtons.forEach(btn => {
                if (!btn.disabled) {
                    btn.disabled = true;
                    btn.classList.add('btn-disabled');
                    btn.innerHTML = '<i class="fas fa-clock"></i> Applications Closed';
                }
            });
        }
    }

    // Add pulse animation CSS if not already added
    if (!document.querySelector('.pulse-styles')) {
        const style = document.createElement('style');
        style.className = 'pulse-styles';
        style.textContent = `
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.02); }
                100% { transform: scale(1); }
            }
        `;
        document.head.appendChild(style);
    }

    updateCountdown();
    setInterval(updateCountdown, 60000); // Update every minute
}

// Smooth scrolling for anchor links
function initializeSmoothScrolling() {
    const links = document.querySelectorAll('a[href^="#"]');
    
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                const offsetTop = targetElement.offsetTop - 80; // Account for fixed navbar
                
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Loading animations
function initializeLoadingAnimations() {
    // Add loading class to elements for staggered animations
    const elements = document.querySelectorAll('.hero-badge, .hero-title, .hero-description, .hero-stats, .hero-actions, .deadline-notice');
    
    elements.forEach((element, index) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(30px)';
        
        setTimeout(() => {
            element.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
        }, 100 * index);
    });
}

// Application modal
function showApplicationModal(mtnData = {}) {
    // Check if deadline has passed
    if (mtnData.isDeadlinePassed) {
        alert('Sorry, the application deadline has passed. Please check back for future opportunities.');
        return;
    }

    // Create modal HTML
    const modal = document.createElement('div');
    modal.className = 'application-modal';
    modal.innerHTML = `
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Ready to Apply?</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <p>You're about to start your application for MTN's Graduate Skills Development Scheme - Project Pathfinder 2025.</p>
                    
                    <div class="application-checklist">
                        <h4>Before you proceed, ensure you have:</h4>
                        <ul>
                            <li><i class="fas fa-check"></i> CV/Resume</li>
                            <li><i class="fas fa-check"></i> Bachelors Degree/HND Certificate</li>
                            <li><i class="fas fa-check"></i> NYSC Discharge Certificate</li>
                            <li><i class="fas fa-check"></i> Birth Certificate</li>
                            <li><i class="fas fa-check"></i> Clear Passport Photo</li>
                        </ul>
                    </div>
                    <div class="deadline-warning">
                        <i class="fas fa-clock"></i>
                        <span>Remember: Applications close on <strong>5th September 2025</strong></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary modal-cancel">Cancel</button>
                    <button class="btn btn-primary modal-proceed">Proceed to Application</button>
                </div>
            </div>
        </div>
    `;

    // Add modal styles
    const modalStyles = document.createElement('style');
    modalStyles.textContent = `
        .application-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10000;
            animation: modalFadeIn 0.3s ease-out;
        }
        
        .modal-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .modal-content {
            background: white;
            border-radius: 12px;
            max-width: 500px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease-out;
        }
        
        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-header h3 {
            margin: 0;
            color: var(--mtn-dark);
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #999;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }
        
        .modal-close:hover {
            background: #f5f5f5;
            color: #333;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .application-checklist {
            margin: 1.5rem 0;
        }
        
        .application-checklist h4 {
            margin-bottom: 1rem;
            color: var(--mtn-dark);
        }
        
        .application-checklist ul {
            list-style: none;
            padding: 0;
        }
        
        .application-checklist li {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            color: var(--mtn-gray);
        }
        
        .application-checklist i {
            color: var(--mtn-yellow);
        }
        
        .deadline-warning {
            background: rgba(255, 204, 0, 0.1);
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid var(--mtn-yellow);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .deadline-warning i {
            color: var(--mtn-yellow);
        }
        
        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #eee;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }
        
        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        @media (max-width: 480px) {
            .modal-footer {
                flex-direction: column;
            }
            
            .modal-footer .btn {
                width: 100%;
                justify-content: center;
            }
        }
    `;
    
    document.head.appendChild(modalStyles);
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';

    // Modal event listeners
    const closeBtn = modal.querySelector('.modal-close');
    const cancelBtn = modal.querySelector('.modal-cancel');
    const proceedBtn = modal.querySelector('.modal-proceed');
    const overlay = modal.querySelector('.modal-overlay');

    function closeModal() {
        modal.style.animation = 'modalFadeIn 0.3s ease-out reverse';
        setTimeout(() => {
            document.body.removeChild(modal);
            document.head.removeChild(modalStyles);
            document.body.style.overflow = '';
        }, 300);
    }

    closeBtn.addEventListener('click', closeModal);
    cancelBtn.addEventListener('click', closeModal);
    
    overlay.addEventListener('click', function(e) {
        if (e.target === overlay) {
            closeModal();
        }
    });

    proceedBtn.addEventListener('click', function() {
        closeModal();
        // Redirect to MTN recruitment portal
        setTimeout(() => {
            window.open('https://recruitment.dragnet-solutions.com/portal/apply?d=mtnn&details=478', '_blank');
        }, 400);
    });

    // Close on escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
}

// Parallax effect for hero section
window.addEventListener('scroll', function() {
    const scrolled = window.pageYOffset;
    const heroImage = document.querySelector('.hero-image');
    const heroPattern = document.querySelector('.hero-bg-pattern');
    
    if (heroImage && scrolled < window.innerHeight) {
        heroImage.style.transform = `translateY(${scrolled * 0.5}px)`;
    }
    
    if (heroPattern && scrolled < window.innerHeight) {
        heroPattern.style.transform = `translateY(${scrolled * 0.3}px)`;
    }
});

// Performance optimization: Debounce scroll events
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Apply debouncing to scroll events
const debouncedScrollHandler = debounce(function() {
    // Handle scroll events here if needed
}, 10);

window.addEventListener('scroll', debouncedScrollHandler);

// Easter egg: Konami code
let konamiCode = [];
const konamiSequence = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65]; // Up Up Down Down Left Right Left Right B A

document.addEventListener('keydown', function(e) {
    konamiCode.push(e.keyCode);
    
    if (konamiCode.length > konamiSequence.length) {
        konamiCode.shift();
    }
    
    if (konamiCode.length === konamiSequence.length && 
        konamiCode.every((code, index) => code === konamiSequence[index])) {
        
        // Easter egg activated
        document.body.style.animation = 'rainbow 2s infinite';
        
        const style = document.createElement('style');
        style.textContent = `
            @keyframes rainbow {
                0% { filter: hue-rotate(0deg); }
                100% { filter: hue-rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
        
        setTimeout(() => {
            document.body.style.animation = '';
            document.head.removeChild(style);
        }, 5000);
        
        konamiCode = [];
    }
});

// Initialize stats animation for PHP data
function initializeStatsAnimation(mtnData = {}) {
    const statsSection = document.querySelector('.stats-banner');
    if (!statsSection) return;

    const statsValues = statsSection.querySelectorAll('.stat-value');
    let hasAnimated = false;

    const observerOptions = {
        threshold: 0.5
    };

    const statsObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !hasAnimated) {
                hasAnimated = true;
                animateStatsCounters(mtnData);
            }
        });
    }, observerOptions);

    statsObserver.observe(statsSection);

    function animateStatsCounters(data) {
        statsValues.forEach(stat => {
            const targetValue = parseInt(stat.textContent.replace(/,/g, ''));
            if (isNaN(targetValue)) return;

            let current = 0;
            const increment = targetValue / 50;
            const timer = setInterval(() => {
                current += increment;
                if (current >= targetValue) {
                    stat.textContent = targetValue.toLocaleString();
                    clearInterval(timer);
                } else {
                    stat.textContent = Math.floor(current).toLocaleString();
                }
            }, 30);
        });
    }
}

// Page tracking for analytics
function initializePageTracking(mtnData = {}) {
    // Track page views
    const pageData = {
        page: mtnData.currentPage || 'home',
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        referrer: document.referrer
    };

    // In a real application, you would send this to your analytics service
    console.log('Page tracking data:', pageData);

    // Track button clicks
    const trackableButtons = document.querySelectorAll('.btn');
    trackableButtons.forEach(button => {
        button.addEventListener('click', function() {
            const eventData = {
                event: 'button_click',
                button_text: this.textContent.trim(),
                button_id: this.id || 'unknown',
                page: mtnData.currentPage || 'home',
                timestamp: new Date().toISOString()
            };
            
            // In a real application, you would send this to your analytics service
            console.log('Button click tracked:', eventData);
        });
    });

    // Track scroll depth
    let maxScroll = 0;
    window.addEventListener('scroll', function() {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        if (scrollPercent > maxScroll) {
            maxScroll = scrollPercent;
            
            // Track at 25%, 50%, 75%, and 100% scroll depths
            if ([25, 50, 75, 100].includes(maxScroll)) {
                const scrollData = {
                    event: 'scroll_depth',
                    depth: maxScroll,
                    page: mtnData.currentPage || 'home',
                    timestamp: new Date().toISOString()
                };
                
                console.log('Scroll depth tracked:', scrollData);
            }
        }
    });
}
